diff --git a/node_modules/cipher-base/index.js b/node_modules/cipher-base/index.js
index 6728005..78ca6ed 100644
--- a/node_modules/cipher-base/index.js
+++ b/node_modules/cipher-base/index.js
@@ -1,99 +1,99 @@
-var Buffer = require('safe-buffer').Buffer
-var Transform = require('stream').Transform
-var StringDecoder = require('string_decoder').StringDecoder
-var inherits = require('inherits')
+var Buffer = require("safe-buffer").Buffer;
+var Transform = require("readable-stream").Transform;
+var StringDecoder = require("string_decoder").StringDecoder;
+var inherits = require("inherits");
 
-function CipherBase (hashMode) {
-  Transform.call(this)
-  this.hashMode = typeof hashMode === 'string'
+function CipherBase(hashMode) {
+  Transform.call(this);
+  this.hashMode = typeof hashMode === "string";
   if (this.hashMode) {
-    this[hashMode] = this._finalOrDigest
+    this[hashMode] = this._finalOrDigest;
   } else {
-    this.final = this._finalOrDigest
+    this.final = this._finalOrDigest;
   }
   if (this._final) {
-    this.__final = this._final
-    this._final = null
+    this.__final = this._final;
+    this._final = null;
   }
-  this._decoder = null
-  this._encoding = null
+  this._decoder = null;
+  this._encoding = null;
 }
-inherits(CipherBase, Transform)
+inherits(CipherBase, Transform);
 
 CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
-  if (typeof data === 'string') {
-    data = Buffer.from(data, inputEnc)
+  if (typeof data === "string") {
+    data = Buffer.from(data, inputEnc);
   }
 
-  var outData = this._update(data)
-  if (this.hashMode) return this
+  var outData = this._update(data);
+  if (this.hashMode) return this;
 
   if (outputEnc) {
-    outData = this._toString(outData, outputEnc)
+    outData = this._toString(outData, outputEnc);
   }
 
-  return outData
-}
+  return outData;
+};
 
-CipherBase.prototype.setAutoPadding = function () {}
+CipherBase.prototype.setAutoPadding = function () {};
 CipherBase.prototype.getAuthTag = function () {
-  throw new Error('trying to get auth tag in unsupported state')
-}
+  throw new Error("trying to get auth tag in unsupported state");
+};
 
 CipherBase.prototype.setAuthTag = function () {
-  throw new Error('trying to set auth tag in unsupported state')
-}
+  throw new Error("trying to set auth tag in unsupported state");
+};
 
 CipherBase.prototype.setAAD = function () {
-  throw new Error('trying to set aad in unsupported state')
-}
+  throw new Error("trying to set aad in unsupported state");
+};
 
 CipherBase.prototype._transform = function (data, _, next) {
-  var err
+  var err;
   try {
     if (this.hashMode) {
-      this._update(data)
+      this._update(data);
     } else {
-      this.push(this._update(data))
+      this.push(this._update(data));
     }
   } catch (e) {
-    err = e
+    err = e;
   } finally {
-    next(err)
+    next(err);
   }
-}
+};
 CipherBase.prototype._flush = function (done) {
-  var err
+  var err;
   try {
-    this.push(this.__final())
+    this.push(this.__final());
   } catch (e) {
-    err = e
+    err = e;
   }
 
-  done(err)
-}
+  done(err);
+};
 CipherBase.prototype._finalOrDigest = function (outputEnc) {
-  var outData = this.__final() || Buffer.alloc(0)
+  var outData = this.__final() || Buffer.alloc(0);
   if (outputEnc) {
-    outData = this._toString(outData, outputEnc, true)
+    outData = this._toString(outData, outputEnc, true);
   }
-  return outData
-}
+  return outData;
+};
 
 CipherBase.prototype._toString = function (value, enc, fin) {
   if (!this._decoder) {
-    this._decoder = new StringDecoder(enc)
-    this._encoding = enc
+    this._decoder = new StringDecoder(enc);
+    this._encoding = enc;
   }
 
-  if (this._encoding !== enc) throw new Error('can\'t switch encodings')
+  if (this._encoding !== enc) throw new Error("can't switch encodings");
 
-  var out = this._decoder.write(value)
+  var out = this._decoder.write(value);
   if (fin) {
-    out += this._decoder.end()
+    out += this._decoder.end();
   }
 
-  return out
-}
+  return out;
+};
 
-module.exports = CipherBase
+module.exports = CipherBase;
